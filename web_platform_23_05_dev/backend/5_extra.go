package backend

//

// IMPORTS ////////////////////////////////////////////////////////////////////////////////////////////////////////////

import (
	"context"
	"database/sql"
	"fmt"
	"net/url"
	"time"

	_ "github.com/sijms/go-ora/v2"
)

// IMPORTS ////////////////////////////////////////////////////////////////////////////////////////////////////////////

//

// STRUCTS ////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STRUCTS ////////////////////////////////////////////////////////////////////////////////////////////////////////////

//

// METHODS ////////////////////////////////////////////////////////////////////////////////////////////////////////////
// METHODS ////////////////////////////////////////////////////////////////////////////////////////////////////////////

//

// GLOBALS ////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GLOBALS ////////////////////////////////////////////////////////////////////////////////////////////////////////////

//

// ACTIONS ////////////////////////////////////////////////////////////////////////////////////////////////////////////

func DoDBThings() {
	var localDB = map[string]string{
		"username": "DISPATCHER",
		"password": "disp",
		// "server":   "127.0.0.1",
		"server":  "172.30.23.16",
		"port":    "1521",
		"service": "PITENEW",
	}

	connectionString := "oracle://" + localDB["username"] + ":" + localDB["password"] +
		"@" + localDB["server"] + ":" + localDB["port"] + "/" + localDB["service"]
	if val, ok := localDB["walletLocation"]; ok && val != "" {
		connectionString += "?TRACE FILE=trace.log&SSL=enable&SSL Verify=false&WALLET=" + url.QueryEscape(localDB["walletLocation"])
	}
	db, err := sql.Open("oracle", connectionString)

	if err != nil {
		fmt.Println("Ошибка при открытии подключения:", err)
		return
	}

	defer db.Close()

	err = db.Ping()
	if err != nil {
		fmt.Println("Ошибка при проверке подключения:", err)
		return
	}

	fmt.Println("Успешное подключение к базе данных Oracle!")

	rows, err := db.QueryContext(context.Background(), "select eventcounter, auxid, time from AUXEVENTARCHIVE where auxid = :1 order by time desc", "777")
	if err != nil {
		fmt.Println("Ошибка при выполнении запроса:", err)
		return
	}
	defer rows.Close()

	// Обработка результатов запроса
	for rows.Next() {
		var (
			eventcounter int
			auxid        string
			time         time.Time
		)

		err := rows.Scan(&eventcounter, &auxid, &time)
		if err != nil {
			fmt.Println("Ошибка при сканировании строки:", err)
			return
		}

		fmt.Println(eventcounter, auxid, time)
	}

	if err = rows.Err(); err != nil {
		fmt.Println("Ошибка при переборе результатов:", err)
		return
	}
}

// ACTIONS ////////////////////////////////////////////////////////////////////////////////////////////////////////////

//

// EXTRAS /////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EXTRAS /////////////////////////////////////////////////////////////////////////////////////////////////////////////

//
